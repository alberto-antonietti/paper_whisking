# import math
import numpy as np
import datetime
import smach
from smach import StateMachine
from smach import CBState
# from smach.state import State
import rospy
from gazebo_msgs.srv import SpawnEntity, SpawnEntityRequest
from gazebo_msgs.srv import DeleteModel, DeleteModelRequest
from geometry_msgs.msg import Point, Vector3, Quaternion
from gazebo_msgs.srv import SetModelState
from gazebo_msgs.msg import ModelState

from hbp_nrp_excontrol.logs import clientLogger


set_model_state = rospy.ServiceProxy('/gazebo/set_model_state', SetModelState)
spawn_entity = rospy.ServiceProxy('/gazebo/spawn_sdf_entity', SpawnEntity)
delete_model = rospy.ServiceProxy('/gazebo/delete_model', DeleteModel)

FINISHED = 'FINISHED'
ERROR = 'ERROR'
PREEMPTED = 'PREEMPTED'


sm = StateMachine(outcomes=[FINISHED, ERROR, PREEMPTED])

spawn_pos = Point(0.0, -0.1, 1.025)
near_pos = Point(0.0, -0.07, 1.025)

r_pos = Point(0.02, -0.065, 1.025)
l_pos = Point(-0.02, -0.065, 1.025)

cyl_xml = """
<?xml version='1.0'?>
<sdf version='1.5'>
  <model name='{obj_name}'>
    <pose>0 0 0 0 0 0</pose>
    <link name='{obj_name}'>
      <inertial>
        <mass>10.0</mass>
      </inertial>
      <collision name='collision'>
        <geometry>
          <cylinder>
            <radius>{radius}</radius>
            <length>{length}</length>
          </cylinder>
        </geometry>
      </collision>
      <visual name='visual'>
        <geometry>
          <cylinder>
            <radius>{radius}</radius>
            <length>{length}</length>
          </cylinder>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/Black</name>
          </script>
        </material>
      </visual>
    </link>
  </model>
</sdf>
"""

shelf_xml = """
<?xml version='1.0'?>
<sdf version='1.5'>
  <model name='{name}'>
    <static>1</static>
    <pose>0 0 0 0 0 0</pose>
    <link name='{name}'>
      <collision name="collision">
        <geometry>
          <box>
            <size>0.02 0.01 0.001</size>
          </box>
        </geometry>
        <max_contacts>10</max_contacts>
      </collision>
      <visual name="visual">
        <geometry>
          <box>
            <size>0.02 0.01 0.001</size>
          </box>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/{color}</name>
          </script>
        </material>
      </visual>
      <self_collide>0</self_collide>
      <kinematic>0</kinematic>
      <gravity>1</gravity>
    </link>
  </model>
</sdf>
"""


def spawn_shelf_msg(name, color):
    msg = SpawnEntityRequest()
    msg.entity_name = name
    msg.entity_xml = shelf_xml.format(name=name, color=color)
    msg.initial_pose.position = Point(0, -0.055, 1.03)
    # msg.initial_pose.position = Point(0, 0, 0)
    msg.reference_frame = "world"

    return msg


def move_model(name, target):
    msg = ModelState()

    msg.model_name = name
    msg.scale = Vector3(1, 1, 1)
    msg.pose.position = target
    msg.pose.orientation = Quaternion(0, 0, 0, 0)
    msg.reference_frame = 'world'

    # call service
    response = set_model_state(msg)

    return response


def spawn_cylinder_state():
    obj_msg = SpawnEntityRequest()

    obj_name = 'cylinder'
    radius = 0.001
    length = 0.05

    obj_msg.entity_name = obj_name
    obj_msg.entity_xml = cyl_xml.format(obj_name=obj_name,
                                        radius=radius,
                                        length=length)
    obj_msg.initial_pose.position = spawn_pos
    obj_msg.reference_frame = "world"

    @smach.cb_interface(outcomes=['success', 'aborted'])
    def cb(userdata):
        spawn_entity(obj_msg)
        clientLogger.info('Spawned')
        return 'success'

    return CBState(cb)


def go_trial():
    msg = DeleteModelRequest()
    msg.model_name = 'shelf_nogo'
    response = delete_model(msg)
    if not response.success:
        pass
        # clientLogger.info('Failed deleting model')

    msg = spawn_shelf_msg('shelf_go', 'Green')
    response = spawn_entity(msg)
    if not response.success:
        pass  # Don't worry it's beacause already exist

    clientLogger.info('')
    clientLogger.info('GO TRIAL')

    response = move_model('cylinder', r_pos)
    if not response.success:
        clientLogger.info('Failed moving cylinder')
        return 'aborted'

    return 'success'


def nogo_trial():
    msg = DeleteModelRequest()
    msg.model_name = 'shelf_go'
    response = delete_model(msg)
    if not response.success:
        pass
        # clientLogger.info('Failed deleting model')

    msg = spawn_shelf_msg('shelf_nogo', 'Red')
    response = spawn_entity(msg)
    if not response.success:
        pass  # Don't worry it's beacause already exist

    clientLogger.info('')
    clientLogger.info('NO-GO TRIAL')

    response = move_model('cylinder', l_pos)
    if not response.success:
        return 'aborted'

    return 'success'


def random_state():
    go_nogo = [True] * 5 + [False] * 5
    trial_count = [0]
    date = str(datetime.datetime.now())

    @smach.cb_interface(outcomes=['success', 'aborted'])
    def cb(userdata):
        i = trial_count[0]
        if i == 0:
            np.random.shuffle(go_nogo)
            # import os
            # clientLogger.info(os.getcwd())
            # /home/nrp/Documents/NRP/ExDBackend/hbp_nrp_backend
            with open('go_nogo' + date + '.txt', 'a') as f:
                f.write(str(go_nogo) + '\n')

            clientLogger.info('GO-NOGO session:', go_nogo)
        trial_count[0] = (i+1) % 10

        # clientLogger.info('GO-NOGO:', go_nogo[i])

        # if np.random.choice([True, False]):
        if go_nogo[i]:
            return go_trial()
        else:
            return nogo_trial()

    return CBState(cb)


def wait_state(duration):
    @smach.cb_interface(outcomes=['success', 'aborted'])
    def cb(userdata):
        clientLogger.info('begin wait state')
        rospy.sleep(duration)
        clientLogger.info('end wait state')
        return 'success'

    return CBState(cb)


with sm:
    StateMachine.add(
        'spawn_cylinder',
        spawn_cylinder_state(),
        transitions={'success': 'random_state',
                     'aborted': ERROR}
    )
    StateMachine.add(
        'random_state',
        random_state(),
        transitions={'success': 'wait',
                     'aborted': ERROR}
    )
    StateMachine.add(
        'wait',
        wait_state(2.0),
        # wait_state(0.01),
        transitions={'success': 'random_state',
                     'aborted': ERROR}
    )
    # StateMachine.add(
    #     'wait',
    #     wait_state(2.0),
    #     transitions={'success': 'wait',
    #                  'aborted': ERROR}
    # )
